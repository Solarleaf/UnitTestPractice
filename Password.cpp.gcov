        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:1
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:#include <cctype>
        -:    4:
        -:    5:using std::string;
        -:    6:
        -:    7:
        -:    8:// Length
function _ZN8Password11pass_lengthEv called 2 returned 100% blocks executed 92%
        2:    9:bool Password::pass_length() {
        2:   10:  string phrase = pass_history.back();
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
       4*:   11:  return (phrase.length() >= 8 && phrase.length() <= 20);
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0
        2:   12:}
call    0 returned 2
        -:   13:
        -:   14:/*
        -:   15:  The function receives a string counts how many times the same character 
        -:   16:  occurs at the beginning of the string, before any other characters (or the
        -:   17:  end of the string). The function is case-sensitive so 'Z' is different than
        -:   18:  'z' and any ASCII characters are allowed.
        -:   19:*/
function _ZN8Password24count_leading_charactersEv called 1 returned 100% blocks executed 78%
        1:   20:int Password::count_leading_characters(){
        1:   21:  string phrase = pass_history.back();
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   22:  int repetition = 1;
        1:   23:  int index = 0;
       1*:   24:  while( index < phrase.length()-1 && phrase[index] == phrase[index+1] ){
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
branch  9 taken 0 (fallthrough)
branch 10 taken 1
branch 11 taken 0
branch 12 taken 1 (fallthrough)
    #####:   25:    repetition++;
    #####:   26:    index++;
        -:   27:  }
        1:   28:  return (repetition<=2);
        1:   29:}
call    0 returned 1
call    1 never executed
        -:   30:
function _ZN8PasswordC2Ev called 3 returned 100% blocks executed 53%
        3:   31:Password::Password() {
call    0 returned 3
        3:   32:  pass_history.push_back("ChicoCA-95929");
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 3
call    8 returned 3
call    9 never executed
call   10 never executed
        3:   33:}
call    0 never executed
        -:   34:
function _ZN8Password3setENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   35:void Password::set(string input) {
    #####:   36:  int check{0};
    #####:   37:  check+=Password::has_mixed_case();
call    0 never executed
    #####:   38:}
        -:   39:
function _ZN8Password12authenticateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   40:bool Password::authenticate(string input) {
        -:   41:  int check[0];
    #####:   42:  return true;
        -:   43:}
        -:   44:
        -:   45:// Implementation A
        -:   46:#if 1==1
function _ZN8Password14has_mixed_caseEv called 1 returned 100% blocks executed 88%
        1:   47:bool Password::has_mixed_case()
        -:   48:{
        1:   49:  string phrase = pass_history.back();
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   50:  string str = phrase;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   51:  bool has_lower = false;
        1:   52:  bool has_upper = false;
       14:   53:  for (char ch : str)
call    0 returned 1
call    1 returned 1
call    2 returned 13
call    3 returned 13
call    4 returned 14
branch  5 taken 13
branch  6 taken 1 (fallthrough)
        -:   54:  {
       13:   55:    if (std::islower(ch))
branch  0 taken 4 (fallthrough)
branch  1 taken 9
        -:   56:    {
        4:   57:      has_lower = true;
        -:   58:    }
        9:   59:    else if (std::isupper(ch))
branch  0 taken 3 (fallthrough)
branch  1 taken 6
        -:   60:    {
        3:   61:      has_upper = true;
        -:   62:    }
        -:   63:  }
       2*:   64:  return has_lower && has_upper;
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   65:}
call    0 returned 1
call    1 returned 1
call    2 never executed
        -:   66:
        -:   67:#endif
        -:   68:
        -:   69:// Implementation B
        -:   70:#if 1==2
        -:   71:bool Password::has_mixed_case(string str)
        -:   72:{
        -:   73:  int count_lower = 0;
        -:   74:  for (int i = 0; i < str.length(); i++)
        -:   75:  {
        -:   76:    if (str[i] >= 'a' && str[i] <= 'z')
        -:   77:    {
        -:   78:      count_lower++;
        -:   79:    }
        -:   80:  }
        -:   81:  return count_lower > 0 && count_lower < str.length();
        -:   82:}
        -:   83:
        -:   84:#endif
        -:   85:
        -:   86:// Implementation C
        -:   87:#if 1==2
        -:   88:bool Password::has_mixed_case(string str)
        -:   89:{
        -:   90:  bool lower = false;
        -:   91:  bool upper = false;
        -:   92:  for (int i = 0; i < str.length(); i++)
        -:   93:  {
        -:   94:    if (str[i] >= 'a' && str[i] <= 'z')
        -:   95:    {
        -:   96:      lower = true;
        -:   97:    }
        -:   98:    else if (str[i] >= 'A' && str[i] <= 'Z')
        -:   99:    {
        -:  100:      upper = true;
        -:  101:    }
        -:  102:  }
        -:  103:  return upper && lower;
        -:  104:}
        -:  105:#endif
        -:  106:
        -:  107:// Implementation D
        -:  108:#if 1==2
        -:  109:bool Password::has_mixed_case(string str)
        -:  110:{
        -:  111:  bool is_lower = false;
        -:  112:  bool is_upper = false;
        -:  113:  for (char c : str)
        -:  114:  {
        -:  115:    if (std::islower(c))
        -:  116:    {
        -:  117:      is_lower = true;
        -:  118:    }
        -:  119:    else
        -:  120:    {
        -:  121:      is_upper = true;
        -:  122:    }
        -:  123:  }
        -:  124:  return is_lower && is_upper;
        -:  125:}
        -:  126:#endif
        -:  127:// Implementation E
        -:  128:#if 1==2
        -:  129:// Implementation E
        -:  130:bool Password::has_mixed_case(string str)
        -:  131:{
        -:  132:  bool found = false;
        -:  133:  for (char c : str)
        -:  134:  {
        -:  135:    if (!found && c >= 'A' && c <= 'Z')
        -:  136:    {
        -:  137:      found = true;
        -:  138:    }
        -:  139:    else if (found && c >= 'a' && c <= 'z')
        -:  140:    {
        -:  141:      return true;
        -:  142:    }
        -:  143:  }
        -:  144:  return false;
        -:  145:}
        -:  146:#endif
